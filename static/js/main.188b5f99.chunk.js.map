{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rotate","char","offset","String","fromCharCode","charCodeAt","hljs","registerLanguage","javascript","App","useState","plaintext","setPlaintext","ciphertext","setCiphertext","setOffset","useEffect","msg","toUpperCase","replace","cipher","i","length","encrypt","className","htmlFor","id","onChange","evt","target","value","R","map","key","rows","cols","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+RAUA,SAASA,EAAOC,EAAMC,GACpB,OAAOC,OAAOC,cAAeH,EAAKI,WAAW,GAAK,GAAKH,GAAU,GAAM,IAHzEI,IAAKC,iBAAiB,aAAcC,KA8BrB,SAASC,IAAO,IAAD,EACMC,mBAAS,0BADf,mBACrBC,EADqB,KACVC,EADU,OAEQF,mBAAS,IAFjB,mBAErBG,EAFqB,KAETC,EAFS,OAGAJ,mBAAS,GAHT,mBAGrBR,EAHqB,KAGba,EAHa,KAS5B,OAJAC,qBAAU,WACRF,EA9BJ,SAAiBG,EAAKf,GACpBe,EAAMA,EAAIC,cAAcC,QAAQ,cAAe,IAE/C,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9BD,GAAUpB,EAAOiB,EAAII,GAAInB,GAE3B,OAAOkB,EAwBSG,CAAQZ,EAAWT,MAChC,CAACS,EAAWT,IAGb,yBAAKsB,UAAU,OACb,6CACA,2BAAOC,QAAQ,UAAf,YACA,4BAAQC,GAAG,SAASC,SAAU,SAACC,GAAD,OAASb,EAAUa,EAAIC,OAAOC,SACzDC,IAAQ,EAAG,IAAIC,KAAI,SAACX,GAAD,OAClB,4BAAQY,IAAKZ,GAAIA,OAGrB,6BACA,8BACEK,GAAG,YACHI,MAAOnB,EACPgB,SAAU,SAACC,GAAD,OAAShB,EAAagB,EAAIC,OAAOC,QAC3CI,KAAK,IACLC,KAAK,OAEP,6BACA,8BACET,GAAG,aACHI,MAAOjB,EACPqB,KAAK,IACLC,KAAK,KACLC,UAAQ,IAEV,6BACE,0BAAMZ,UAAU,cAlDd,yVCXV,IAAMa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,yBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,yBAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.188b5f99.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as R from \"ramda\";\nimport \"./App.css\";\n\nimport hljs from \"highlight.js/lib/core\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\nimport \"highlight.js/styles/github.css\";\n\nhljs.registerLanguage(\"javascript\", javascript);\n\nfunction rotate(char, offset) {\n  return String.fromCharCode(((char.charCodeAt(0) - 65 + offset) % 26) + 65);\n}\n\nfunction encrypt(msg, offset) {\n  msg = msg.toUpperCase().replace(/[\\s|\\r|\\n]/g, \"\");\n  let cipher = \"\";\n  for (let i = 0; i < msg.length; i++) {\n    cipher += rotate(msg[i], offset);\n  }\n  return cipher;\n}\n\nconst CODE = `\nfunction rotate(char, offset) {\n  return String.fromCharCode(((char.charCodeAt(0) - 65 + offset) % 26) + 65);\n}\n  \nfunction encrypt(msg, offset) {\n  msg = msg.toUpperCase().replace(/[\\\\s|\\\\r|\\\\n]/g, \"\");\n  let cipher = \"\";\n  for (let i = 0; i < msg.length; i++) {\n    cipher += rotate(msg[i], offset);\n  }\n  return cipher;\n}\n`;\n\nexport default function App() {\n  const [plaintext, setPlaintext] = useState(\"Try entering some text\");\n  const [ciphertext, setCiphertext] = useState(\"\");\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    setCiphertext(encrypt(plaintext, offset));\n  }, [plaintext, offset]);\n\n  return (\n    <div className=\"App\">\n      <h3>Caesar Cipher</h3>\n      <label htmlFor=\"offset\">Offset: </label>\n      <select id=\"offset\" onChange={(evt) => setOffset(evt.target.value)}>\n        {R.range(0, 26).map((i) => (\n          <option key={i}>{i}</option>\n        ))}\n      </select>\n      <br />\n      <textarea\n        id=\"plaintext\"\n        value={plaintext}\n        onChange={(evt) => setPlaintext(evt.target.value)}\n        rows=\"5\"\n        cols=\"60\"\n      />\n      <br />\n      <textarea\n        id=\"ciphertext\"\n        value={ciphertext}\n        rows=\"5\"\n        cols=\"60\"\n        disabled\n      />\n      <pre>\n        <code className=\"javascript\">{CODE}</code>\n      </pre>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}